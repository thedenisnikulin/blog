<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on ü¶Ütinyblog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on ü¶Ütinyblog</description>
    <generator>Hugo -- 0.126.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Jun 2024 15:38:24 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Draft_next</title>
      <link>http://localhost:1313/posts/draft_next/</link>
      <pubDate>Sat, 01 Jun 2024 15:38:24 +0300</pubDate>
      <guid>http://localhost:1313/posts/draft_next/</guid>
      <description>–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ì:
–∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ —à–∏—Ä–æ–∫–æ–µ —Ä–∞—Å–ø—Ç—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä –µ—Å—Ç—å —á–∞—Ç–≥–ø—Ç —ç—Ç–æ –Ω–æ—Ä–º –Ω–æ –∫–æ–≥–¥–∞ —á–∞—Ç–≥–ø—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ 0.0001–º—Å —Ç–æ —ç—Ç–æ —É–∂–µ –∏–º–±–∞) –≤—Å–∫–æ–¥ —Ö–æ—Ä–æ—à–æ –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö (–ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º –ø–æ—á—Ç–∏ –Ω–µ—Ç —à–æ—Ä—Ç–∫–∞—Ç–æ–≤, –∞ –∫–æ–≥–¥–∞ —Å—Ç—Ä–µ—Å—Å —è –∑–∞–±—ã–≤–∞—é –≤—Å–µ —à–æ—Ä—Ç–∫–∞—Ç—ã –∏ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –º–∏—Ä–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–º –∏–ª–∏ —Ö–µ–ª–∏–∫—Å –æ—á–µ–Ω—å –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ) Enlightenmentware post </description>
    </item>
    <item>
      <title>My &#34;Enlightenmentware&#34; list</title>
      <link>http://localhost:1313/posts/enlightenmentware/</link>
      <pubDate>Sat, 01 Jun 2024 15:38:14 +0300</pubDate>
      <guid>http://localhost:1313/posts/enlightenmentware/</guid>
      <description>I recently read a post about Enlightenmentware, software which made you realize something great, i.e. enlightened you in some way or another. Here&amp;rsquo;s list of tools using which made me feel enlightened and why. I wanted to write this stuff quite long ago so the ideas here are written briefly.
Helix Go </description>
    </item>
    <item>
      <title>When VS Code is unbeatable</title>
      <link>http://localhost:1313/posts/unbeatable-vscode/</link>
      <pubDate>Sat, 01 Jun 2024 11:17:24 +0300</pubDate>
      <guid>http://localhost:1313/posts/unbeatable-vscode/</guid>
      <description>I&amp;rsquo;ve been working on my terminal-only development environment for about 1-2 years already, and for this time I established some common tools that I use on a daily basis, among these are Helix editor, Zellij, lazygit, and a bunch of others. These tool are 99% keyboard driven, and in order to work with them you have to know a bunch of keybindings, each having their own ones, but there&amp;rsquo;s no need to say that it makes you quite more efficient.</description>
    </item>
    <item>
      <title>My Approach to Neovim</title>
      <link>http://localhost:1313/posts/my-approach-to-neovim/</link>
      <pubDate>Thu, 06 Jul 2023 22:31:44 +0300</pubDate>
      <guid>http://localhost:1313/posts/my-approach-to-neovim/</guid>
      <description>The story I always found myself looking towards those terminal based modal editors like Neovim, but every time one thing really held me behind: the amount of time I needed to put into configuration. You have to spend quite a lot of time to configure a stable feature-complete version of Neovim, and it actually doesn&amp;rsquo;t quite pay off in the beginning, because it&amp;rsquo;s so tempting to stay with your comfy VS Code and don&amp;rsquo;t waste time.</description>
    </item>
    <item>
      <title>Type-level Bubble Sort in Rust: Part 2</title>
      <link>http://localhost:1313/posts/type-level-bubble-sort-2/</link>
      <pubDate>Wed, 16 Mar 2022 22:42:08 +0300</pubDate>
      <guid>http://localhost:1313/posts/type-level-bubble-sort-2/</guid>
      <description>Hello everyone! In the previous post from this series we discussed traits, type-level number representation, and implementation of basic type-level computations. The topic of this article is type-level lists. Make some tea or coffee and let&amp;rsquo;s dive into the details!
Image source: link
Type-level lists There&amp;rsquo;s a data structure that you are most probably familiar with - a linked list. Each element of a linked list stores a value and points to the next element, and the last element of such list points to nothing.</description>
    </item>
    <item>
      <title>Type-level Bubble Sort in Rust: Part 1</title>
      <link>http://localhost:1313/posts/type-level-bubble-sort-1/</link>
      <pubDate>Thu, 03 Mar 2022 22:42:03 +0300</pubDate>
      <guid>http://localhost:1313/posts/type-level-bubble-sort-1/</guid>
      <description>In this series of articles, we are going to implement bubble sort algorithm on the type level using (abusing) Rust&amp;rsquo;s type system, which is Turing-complete.
The goal I want to accomplish by these articles is to help you understand what type level programming feels like, try to clear what&amp;rsquo;s behind of all these &amp;ldquo;traits&amp;rdquo; and &amp;ldquo;impls&amp;rdquo;, and to show what Rust&amp;rsquo;s type system is capable of.
Before jumping in, you may need to have a basic understanding of Rust programming language (although the understanding of some FP language like Haskell or Scala should be also good enough).</description>
    </item>
  </channel>
</rss>
